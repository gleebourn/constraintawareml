#!/usr/bin/env python
from sys import path,argv
from pathlib import Path
path.append(str(Path('.').absolute()))

from jax.numpy import array
from cal.jaxn import bin_optimiser,controller,nlp_params,nlp_infer,\
                     conv_params,conv_infer

from tensorflow.keras.datasets import mnist

from numpy import float32,reshape
d=mnist.load_data()

X,y,X_test,y_test=d[0][0].astype(float32),(d[0][1]==0).astype(float32),\
                  d[1][0].astype(float32),(d[1][1]==0).astype(float32)

if argv[1]=='nlp':
  X=X.reshape((X.shape[0],X.shape[1]*X.shape[2]))
  X_test=X_test.reshape((X_test.shape[0],X_test.shape[1]*X_test.shape[2]))
print(X.shape)
print(y.shape)

c=controller(X,y,X_test,y_test)

for b in [1.]:#[.7,1,1.4]:
  if argv[1]=='nlp':
    h=bin_optimiser(X.shape[1],beta=b,outf='log/beta_'+str(b)+'.log',
                    implementation=nlp_infer,
                    init_params=nlp_params)
  elif argv[1]=='conv':
    h=bin_optimiser(X[0].shape,beta=b,outf='log/beta_'+str(b)+'.log',
                    implementation=conv_infer,
                    init_params=conv_params)
  c.init_job(h,50,32,'beta_'+str(b))
