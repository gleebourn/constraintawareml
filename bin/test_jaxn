#!/usr/bin/env python
from sys import path,argv
from pathlib import Path
path.append(str(Path('.').absolute()))
from os import mkdir
from os.path import isfile
from sys import stderr
from subprocess import check_output

if check_output(['git','status']).decode('ascii').\
   split('\n')[-2]!='nothing to commit, working tree clean':
  print('Head not clean, unable to guarantee reproducibility',
        file=stderr)
  exit(1)

try:
  log_dir='log_'+check_output(['git','rev-parse','--short','HEAD']).\
                 decode('ascii')[:-1]
  mkdir(log_dir)
except FileExistsError:
  pass

from jax.numpy import array,geomspace
from numpy import linspace,geomspace
from cal.jaxn import bin_optimiser,nlp_params,nlp_infer,conv_params,conv_infer

from tensorflow.keras.datasets import mnist

d=mnist.load_data()

from numpy import float32,reshape

X,y,X_test,y_test=d[0][0].astype(float32),(d[0][1]==0).astype(float32),\
                  d[1][0].astype(float32),(d[1][1]==0).astype(float32)

opts=['nlp','conv']
if len(argv)!=2 or not(argv[1] in opts):
  print('Usage:',argv[0],opts,file=stderr)
  exit(1)

if argv[1]=='nlp':
  X=X.reshape((X.shape[0],X.shape[1]*X.shape[2]))
  X_test=X_test.reshape((X_test.shape[0],X_test.shape[1]*X_test.shape[2]))
print(X.shape)
print(y.shape)

if argv[1]=='nlp':
  in_shape=X.shape[1]
  implementation=nlp_infer
  init_params=nlp_params
elif argv[1]=='conv':
  in_shape=X[0].shape
  implementation=conv_infer
  init_params=conv_params

performance=[]
n_trials=20
for fp,fn in zip(geomspace(.001,.04,n_trials),geomspace(.04,.001,n_trials)):
  outf_name=log_dir+'/fp_'+str(fp)+'_fn_'+str(fn)+'.log'
  #if not(isfile(outf_name)):
  o=bin_optimiser(in_shape,outf=outf_name,
                  target_fp=fp,target_fn=fn,init_params=init_params,
                  implementation=implementation)
  
  performance.append((fp,fn)+o.run_epochs(X,y,X_test,y_test,verbose=1))
  print('Performance by epoch for target fp,fn=,(',fp,',',fn,'):')
  for a,b in zip(performance[-1][2],performance[-1][3]):
    print('(',a,',',b,')')

from matplotlib.pyplot import plot,show,cm
colours=cm.rainbow(linspace(0,1,n_trials))

print('Plotting...')
for (tgt_fp,tgt_fn,fp,fn),col in zip(performance,colours):
  plot(tgt_fp,tgt_fn,'o',c=col)
  plot(fp,fn,c=col)

show()
