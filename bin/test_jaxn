#!/usr/bin/env python
from sys import path,argv
from pathlib import Path
path.append(str(Path('.').absolute()))
from os import mkdir
from os.path import isfile
from sys import stderr
from subprocess import check_output
from pickle import dump,load

reprod=''
if check_output(['git','status']).decode('ascii').\
   split('\n')[-2]!='nothing to commit, working tree clean':
  print('Head not clean, unable to guarantee reproducibility',
        file=stderr)
  if len(argv)<=2:
    exit(1)
  else:
    reprod='unrep_'

prep=reprod+check_output(['git','rev-parse','--short','HEAD']).\
                 decode('ascii')[:-1]

log_dir=prep+'/log/'
sns_dir=prep+'/sns/'

try: mkdir(prep)
except FileExistsError: pass
try: mkdir(log_dir)
except FileExistsError: pass
try: mkdir(sns_dir)
except FileExistsError: pass

from jax.numpy import array,geomspace
from numpy import linspace,geomspace
from cal.jaxn import bin_optimiser,nlp_params,nlp_infer,conv_params,conv_infer

from matplotlib.pyplot import plot,show,cm

from tensorflow.keras.datasets import mnist

d=mnist.load_data()

from numpy import float32,reshape

X,y,X_test,y_test=d[0][0].astype(float32),(d[0][1]==0).astype(float32),\
                  d[1][0].astype(float32),(d[1][1]==0).astype(float32)

opts=['nlp','conv']
if len(argv)<2 or not(argv[1] in opts):
  print('Usage:',argv[0],opts,'[norep]',file=stderr)
  exit(1)

if argv[1]=='nlp':
  X=X.reshape((X.shape[0],X.shape[1]*X.shape[2]))
  X_test=X_test.reshape((X_test.shape[0],X_test.shape[1]*X_test.shape[2]))

if argv[1]=='nlp':
  in_shape=X.shape[1]
  implementation=nlp_infer
  make_params=nlp_params
elif argv[1]=='conv':
  in_shape=X[0].shape
  implementation=conv_infer
  make_params=conv_params

performance=[]
n_trials=20
tolerance=.5
for fp,fn,col in zip(geomspace(.005,.08,n_trials),geomspace(.08,.005,n_trials),
                     cm.rainbow(linspace(0,1,n_trials))):
  f_prep=argv[1]+'_fp_'+str(fp)+'_fn_'+str(fn)
  log_filename=log_dir+f_prep+'.log'
  snapshot_dir_name=sns_dir+f_prep+'/'
  epoch_snapshot_filename=snapshot_dir_name+'epochs.pkl'
  try:
    with open(epoch_snapshot_filename,'rb') as f:
      fp_epochs,fn_epochs=load(f)
  except FileNotFoundError:
    o=bin_optimiser(in_shape,logf=log_filename,sns_dir=snapshot_dir_name,
                    target_fp=fp,target_fn=fn,make_params=make_params,
                    implementation=implementation,tol=tolerance)
    
    fp_epochs,fn_epochs=o.run_epochs(X,y,X_test,y_test,verbose=1)
    with open(epoch_snapshot_filename,'wb') as f:
      dump((fp_epochs,fn_epochs),f)
  print('Performance by epoch for target fp,fn=,(',fp,',',fn,'):')
  for a,b in zip(fp_epochs,fn_epochs):
    print('(',a,',',b,')')
  plot(fp_epochs,fn_epochs,c=col)
  plot([fp,fp*tolerance],[fn,fn*tolerance],'o',c=col,linestyle='dotted')


show()
