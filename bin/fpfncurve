#!/usr/bin/env python
from pathlib import Path
from os.path import dirname,abspath
from sys import path,argv
path.append(dirname(dirname(abspath(__file__))))
from cal.cal import dict_to_tup
from itertools import product
from ast import literal_eval
from csv import reader,writer
from pandas import read_csv
from pickle import load,dump
from flax.serialization import to_state_dict
if len(argv)!=3:
  print('Usage:',argv[0],'RES_DIR OUT_CSV')
  exit(1)
dir_p=Path(argv[1])
out_p=Path(argv[2])
out_p.mkdir(exist_ok=True)
smooth_p=dir_p/'smooth_preds'
res=read_csv(dir_p/'res.csv')
exp_labs=[]
params=[]
hs=[]
stages=[]
with (smooth_p/'hashtab.csv').open('r') as fd:
  for r in reader(fd):
    stage,b=r[0].split('_')
    c,lab=r[-2].split('_')
    param=b+','+(','.join(r[1:-2]))+','+c
    h=r[-1]
    
    stages.append(stage)
    exp_labs.append(lab)
    params.append(param)
    hs.append(h)

labs=list(set(exp_labs))
print(labs)
target_fps={l:sorted(set(res['fp_target'][res['cat_lab']==l])) for l in labs}
target_fns={l:sorted(set(res['fn_target'][res['cat_lab']==l]),key=lambda x:-x) for l in labs}
print(target_fps)
print(target_fns)
n_points=100
n_pkls=len(hs)
print(n_pkls,'pickles to load...')
n_done=0
for h,stage,param,l in zip(hs,stages,params,exp_labs):
  with (smooth_p/(h+'.pkl')).open('rb') as fd:
    Y,Yp,Yp_smooth=load(fd)
  n_rows=len(Y)
  n_pos=Y.sum()
  #if 'nn' in param:
  #  Yp_smooth=to_state_dict(Yp_smooth)
  for t in Yp_smooth:
    for i,(tfp,tfn) in enumerate(zip(target_fps[l],target_fns[l])):
      if 'nn' in param:
        print('nn...')
        Yp_smooth_c=Yp_smooth[t][i]
      else:
        Yp_smooth_c=Yp_smooth[t]
        print('sk...')
      print(Yp_smooth_c.shape)

      n_neg=n_rows-n_pos
      p=n_pos/n_rows
      fpfn_interval=p/n_points
      fp=n_neg/n_rows
      fn=0
      delta_p=1/n_rows
      next_fn=fpfn_interval
      print('fpfn_interval:',fpfn_interval)
      print('p:',p)
      fpfn_ind=0
      fps=[]
      fns=[]
      rearr=Yp_smooth_c.argsort()
      Yp_smooth_c=Yp_smooth_c[rearr]
      for yp,y in zip(Yp_smooth_c,Y[rearr]):
        if y:
          fn+=delta_p
        else:
          fp-=delta_p
        if fn>next_fn:
          fpfn_ind+=1
          print(fpfn_ind,'fp:',fp,'fn:',fn,end=('\r' if fpfn_ind%10 else '\n'))
          fps.append(fp)
          fns.append(fn)
          next_fn+=fpfn_interval
      print()
      with (out_p/(l+'_'+str(tfp)+'_'+str(tfn)+h+'_'+str(t)+'_'+stage+'.csv')).open('w') as fd:
        w=writer(fd)
        w.writerow(['fp','fn'])
        w.writerows(zip(fps,fns))
  n_done+=1
  print('processed',n_done,'of',n_pkls,'pickles...')

