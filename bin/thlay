#!/usr/bin/env python
from pickle import load
from time import perf_counter
from numpy import sum as nsm,min as nmn,max as nmx
from jax.numpy import exp,sin,inf
from jax.random import key,split,choice
from jax.profiler import save_device_memory_profile
from sys import path,stdin
from os import mkdir,environ
#environ["XLA_PYTHON_CLIENT_PREALLOCATE"]="false"
#environ["XLA_PYTHON_CLIENT_MEM_FRACTION"]=".99"
#environ["XLA_PYTHON_CLIENT_ALLOCATOR"]="platform"

from os.path import dirname,abspath
from sys import path
path.append(dirname(dirname(abspath(__file__))))
from cal.thlay import init_ensemble,init_experiments,activations,f_to_str,save_ensemble,\
                      exp_to_str,fpfnp_lab,f,get_xy,report_progress,update_lrs,losses,\
                      evaluate_fp_fn,update_history,compute_U_V,update_weights,resnet,\
                      read_input_if_ready,fm

a=init_ensemble()

global_key,report_key=split(key(a.seed))
def emit_key(report=False):
  global global_key,report_key
  new_key,child_key=split(report_key if report else global_key)
  if report:
    report_key=new_key
  else:
    global_key=new_key
  return child_key

try:
  mkdir(a.out_dir)
  new=True
except FileExistsError:
  print('Already seems to be something there... [O]verwrite, [L]oad or [A]bort?')
  ln=stdin.readline()[0].lower()
  if ln[0]=='l':
    new=False
  elif ln[0]=='o':
    new=True
    print('Overwriting any existing ensembles...')
  else:
    print('Abort!')
    exit()

if not new:
  try:
    with open(a.out_dir+'/ensemble.pkl','rb') as fd:
      print('Opening experiment ensemble',a.outf,'...')
      od=a.out_dir #Correct the actual directory if opened somewhere else
      a,experiments,global_key=load(fd)
      a.out_dir=od
      new=False
      global_key=a.global_key
      print('Restored',a.outf+'.pkl','from disk')
  except FileNotFoundError:
    print('No pkl in directory...')
    new=True

else:
  print('Generating new experiments...')
  
  experiments=init_experiments(a,global_key)

act=activations[a.act] #Would like to pickle but unable to do so to lambdas
imp=f
if a.fm:
  imp=fm
elif a.resnet:
  imp=resnet
loss,dloss,imp=losses[a.loss](act,imp=imp)

def get_timestep(label):
  global tl
  t=perf_counter()
  try: a.time_avgs[label]+=(1+a.clock_avg_rate)*a.clock_avg_rate*float(t-tl)
  except: a.time_avgs[label]=(1+a.clock_avg_rate)*float(t-tl)
  a.time_avgs[label]*=(1-a.clock_avg_rate)
  tl=t

while True:
  tl=perf_counter()
  get_timestep('Start_step')
  xy=get_xy(a,a.imbalances,a.bs,emit_key())
  a.lr_phase+=a.lr_momentum
  get_timestep('get_xy')
  for e in experiments:
    get_timestep('start_loop')
    if a.stop_on_target and e.steps_to_target:
      continue
    x,y_t=xy[float(e.p)]
    e.lr=a.lr*exp(a.lr_amplitude*sin(a.lr_phase))
    e.bs=len(y_t)
    get_timestep('access_xy')
    y_p=imp(e.w_model[0],e.w_model[1],x).flatten()>0

    get_timestep('threshold')
    evaluate_fp_fn(e,y_p,y_t,trad_avg=a.trad_avg)
    get_timestep('evaluate_fp_fn')

    if a.no_U_V:
      e.U=e.V=1
    else:
      e.U,e.V=compute_U_V(e.fp,e.fn,e.target_fp,e.target_fn,
                          1 if a.iterate_minority else e.p,
                          sm=a.softmax_U_V,p_scale=a.p_scale,
                          scale_before_sm=a.scale_before_sm)
    get_timestep('U,V')
    e.loss_val,upd=dloss(e.w_model[0],e.w_model[1],x,y_t,e.U,e.V,eps=e.eps)#,act=act,
    #print(y_t,nsm(x**2)**.5,
    #      sum([nsm(u**2) for u in upd[0]]),sum([nsm(u**2) for u in upd[1]]))
    get_timestep('dloss')
    if e.loss_val==inf:
      print('nan encountered, increasing loss epsilon for experiment')
      e.eps*=2
      upd=[(0.,0.) for u in upd]

    e.loss_vals[e.step]=float(e.loss_val)
    update_weights(a,e,upd)
    get_timestep('update_weights')

    update_history(e)
    get_timestep('update_history')
    e.step+=1
    
  '''
  if not a.step%a.lr_update_interval and a.mode=='adaptive_lr':
    experiments=update_lrs(a,[e for e in experiments if (not a.stop_on_target) and\
                                                        (not e.steps_to_target)],
                           emit_key())
  '''


  line=read_input_if_ready()
  if not a.step%a.print_step_interval:
    print('Step',a.step)

  if not a.step%a.saving_interval:
    save_ensemble(a,experiments,global_key)

  if line or not a.step%a.reporting_interval:
    if not line:
      line=read_input_if_ready()
    report_progress(a,experiments,line,act,emit_key(report=True))

  a.step+=1
