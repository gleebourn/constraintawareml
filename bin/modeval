#!/usr/bin/env python
from pathlib import Path
from os.path import dirname,abspath
from sys import path,argv,stdout
path.append(dirname(dirname(abspath(__file__))))
from cal.cal import ModelEvaluation
from cal.kal import skp
from cal.rs import resamplers_list
from itertools import product
from argparse import ArgumentParser
ap=ArgumentParser()
ap.add_argument('-nn_times',type=int,nargs='+',default=[128])
ap.add_argument('-nn_start_widths',type=int,nargs='+',default=[64])
ap.add_argument('-nn_end_widths',type=int,nargs='+',default=[32])
ap.add_argument('-nn_depths',type=int,nargs='+',default=[4])
ap.add_argument('-nn_epoch_correct_thresh',type=bool,nargs='+',default=[False])
ap.add_argument('-sk_depths',type=int,nargs='+',default=[14])
ap.add_argument('-sk_models',type=str,nargs='+',default=['RandomForestRegressor'],choices=list(skp))
ap.add_argument('-resamplers',type=str,nargs='+',default=['none'],
                choices=['none']+[rs for rs in resamplers_list if rs])
ap.add_argument('-dataset',type=str,default='unsw')
ap.add_argument('-labelled_categories',type=bool,default=True)
ap.add_argument('-fpfn_curve_n_points',type=int,default=1000)
ap.add_argument('-nn',type=lambda s:s=='True',default=True)
ap.add_argument('-sk',type=lambda s:s=='True',default=True)
ap.add_argument('-log_stdout',action='store_true')
ap=ap.parse_args()
ap.nn_times=tuple(ap.nn_times)
ap.resamplers=['' if rs=='none' else rs for rs in ap.resamplers]

params={'nn':[dict(lr_ad=1e-3,reg=1e-5,lrfpfn=5e-3,bias=0.,times=ap.nn_times,
                   start_width=sw,end_width=ew,depth=d,bs=128,act='relu',adap_thresh=adt,
                   init='glorot_normal',eps=1e-8,beta1=.9,beta2=.999,layer_norm=False)\
                       for sw,ew,d,adt in product(ap.nn_start_widths,ap.nn_end_widths,ap.nn_depths,
                                                  ap.nn_epoch_correct_thresh)] if ap.nn else [],
        'sk':[]}
if ap.sk:
  for rg in ap.sk_models:
    depth_dicts=[{'max_depth':d} for d in ap.sk_depths] if rg in ['RandomForestClassifier','RandomForestRegressor'] else [{}] 
    for depth_rg in depth_dicts:
      params['sk'].append(dict(regressor=rg,**skp[rg],**depth_rg))

m=ModelEvaluation(ds=ap.dataset,lab_cat=ap.labelled_categories,params=params,
                  fpfn_curve_n_points=ap.fpfn_curve_n_points,logf=stdout if ap.log_stdout else None)
m.set_targets()
m.define_jobs(resamplers=ap.resamplers)
m.run_jobs()
